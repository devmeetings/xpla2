#!/bin/bash
set -e

# Hidden from output
WORK_KEY="10188b3cca0b32d28c26d7e1f25873b2d30f95f7"
set -x
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
WORK_DIR="/tmp/work"
COMMAND="$DIR/../../git-to-slides/index.js"
TARGET_OWNER="$1"
TARGET_REPO="$2"
BRANCH="$3"
WORK_OWNER="xpla-bot"
WORK_REPO="$TARGET_REPO"
SLIDES_WORKDIR="slides-$TARGET_OWNER-$BRANCH"
LOG_FILE="./$SLIDES_WORKDIR-pr-log"

if [ "x$TARGET_OWNER" == "x" ]; then
  echo "Please provide TARGET_OWNER";
  exit 2
fi
if [ "x$TARGET_REPO" == "x" ]; then
  echo "Please provide TARGET_REPO";
  exit 3
fi
if [ "x$BRANCH" == "x" ]; then
  echo "Please provide BRANCH";
  exit 3
fi

set +x
# Creating fork
echo "Forking repository"
curl -i \
    -H "Content-Type: application/json" \
    -H "Authorization: token ${WORK_KEY}" \
    -X POST \
    -d "{}" \
    "https://api.github.com/repos/$TARGET_OWNER/$TARGET_REPO/forks"
set -x

# Clone repo
echo "Cloning repo"
rm -rf $WORK_DIR || true
git clone -b $BRANCH "https://github.com/$TARGET_OWNER/$TARGET_REPO.git" $WORK_DIR
cd $WORK_DIR
# Format code
echo "Processing"
$COMMAND > $LOG_FILE
# Clear any unfinished work
rm ../$SLIDES_WORKDIR -r || true
mv slides ../$SLIDES_WORKDIR
git checkout gh-pages || (git checkout --orphan gh-pages && git rm * -rf)
if [ "$BRANCH" == "master" ]; then
  rsync -a ../$SLIDES_WORKDIR/* .
  git add .
else
  rsync -a ../$SLIDES_WORKDIR $BRANCH
  git add $BRANCH
fi
rm ../$SLIDES_WORKDIR -r
# Commit
echo "Committing work"
git commit -am "Auto-generated slides for $BRANCH"
# And push
sleep 10
echo "Pushing work to repo"
git remote add work "https://${WORK_OWNER}:${WORK_KEY}@github.com/$WORK_OWNER/${WORK_REPO}.git"
git push -u work gh-pages --force
# Prepare PR
echo "Preparing PR"
set +x
curl -i \
    -H "Content-Type: application/json" \
    -H "Authorization: token ${WORK_KEY}" \
    -X POST \
    -d "{\"title\": \"Autogenerated slides\", \"head\": \"$WORK_OWNER:gh-pages\", \"base\": \"gh-pages\", \"body\": \"\`\`\`\n$(sed -e ':a;N;$!ba;s/\n/\\n/g;s/"/_/g' $LOG_FILE)\n\`\`\`\"}" \
  "https://api.github.com/repos/$TARGET_OWNER/$TARGET_REPO/pulls"
set -x

# Cleanup
echo "Cleaning..."
rm $LOG_FILE
cd -
rm $WORK_DIR -rf
