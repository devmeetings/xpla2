#!/bin/bash
set -e

# Hidden from output
WORK_KEY="10188b3cca0b32d28c26d7e1f25873b2d30f95f7"
set -x
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
WORK_DIR="/tmp/work"
COMMAND="$DIR/../../git-to-slides/index.js"
ARGS=()
TARGET_OWNER="$1"
TARGET_REPO="$2"
BRANCHES=$3
WORKSHOP_NAME=$4
WORKSHOP_DATE=$5
WORKSHOP_LINK=$6
WORKSHOP_AUTHOR=$7
WORKSHOP_AUTHOR_LINK=$8
WORK_OWNER="xpla-bot"
WORK_REPO="$TARGET_REPO"
SLIDES_WORKDIR="slides-$TARGET_OWNER"
LOG_FILE="/tmp/$SLIDES_WORKDIR-pr-log"

if [ "x$TARGET_OWNER" == "x" ]; then
  echo "Please provide TARGET_OWNER";
  exit 2
fi
if [ "x$TARGET_REPO" == "x" ]; then
  echo "Please provide TARGET_REPO";
  exit 3
fi

# Branches can be:
# 1. `none` - generate from directories
# 2. `` (empty) - generate from JSON
# 3. `branch=Title` - semicolon separated list of branches
if [ "x$BRANCHES" == "xnone" ]; then
  ARGS+=(--from-dirs)
elif [ "x$BRANCHES" != "x" ]; then
  ARGS+=(--branches "$BRANCHES")
else
  ARGS+=(--config)
fi

if [ "x$WORKSHOP_NAME" != "x" ]; then
  ARGS+=(--name "$WORKSHOP_NAME")
fi

if [ "x$WORKSHOP_DATE" != "x" ]; then
  ARGS+=(--date "$WORKSHOP_DATE")
fi

if [ "x$WORKSHOP_LINK" != "x" ]; then
  ARGS+=(--link "$WORKSHOP_LINK")
fi

if [ "x$WORKSHOP_AUTHOR" != "x" ]; then
  ARGS+=(--author "$WORKSHOP_AUTHOR")
fi

if [ "x$WORKSHOP_AUTHOR_LINK" != "x" ]; then
  ARGS+=(--author-link "$WORKSHOP_AUTHOR_LINK")
fi

set +x
# Creating fork
echo "Forking repository"
curl -i \
    -H "Content-Type: application/json" \
    -H "Authorization: token ${WORK_KEY}" \
    -X POST \
    -d "{}" \
    "https://api.github.com/repos/$TARGET_OWNER/$TARGET_REPO/forks" > /dev/null
set -x

# Clone repo
echo "Cloning repo"
rm -rf $WORK_DIR || true
rm -rf $LOG_FILE || true
git clone "https://github.com/$TARGET_OWNER/$TARGET_REPO.git" $WORK_DIR
cd $WORK_DIR

for remote in `git branch -r `; do git branch --track $remote; done

if [ "x$BRANCHES" != "xnone" ]; then
  IFS=';' read -r -a branchnames <<< "$BRANCHES"
  # Create local branches
  for remote in "${branchnames[@]}"; do
    git checkout ${remote%%=*} ; git pull;
  done
fi
git checkout master
# Format code
echo "Processing"
$COMMAND "${ARGS[@]}"> $LOG_FILE
# Clear any unfinished work
rm ../$SLIDES_WORKDIR -r || true
mv slides ../$SLIDES_WORKDIR
git checkout gh-pages || (echo "You need to create gh-pages branch first. (git checkout --orphan gh-pages)" && exit 10)
rsync -a ../$SLIDES_WORKDIR/* .
git add .
rm ../$SLIDES_WORKDIR -r
# Commit
echo "Committing work"
git commit -am "Auto-generated slides."
# And push
sleep 10
echo "Pushing work to repo"
set +x
git remote add work "https://${WORK_OWNER}:${WORK_KEY}@github.com/$WORK_OWNER/${WORK_REPO}.git"
git push -u work gh-pages --force &> $LOG_FILE
set -x
# Prepare PR
echo "Preparing PR"
set +x
curl -i \
    -H "Content-Type: application/json" \
    -H "Authorization: token ${WORK_KEY}" \
    -X POST \
    -d "{\"title\": \"Autogenerated slides\", \"head\": \"$WORK_OWNER:gh-pages\", \"base\": \"gh-pages\", \"body\": \"\`\`\`\n$(sed -e ':a;N;$!ba;s/\n/\\n/g;s/"/_/g' $LOG_FILE)\n\`\`\`\"}" \
  "https://api.github.com/repos/$TARGET_OWNER/$TARGET_REPO/pulls"
set -x

# Cleanup
echo "Cleaning..."
rm $LOG_FILE
cd -
rm $WORK_DIR -rf
